name: Publish Kata 2.x release artifacts
on:
  push:
    tags:
     - '2.*'

jobs:
  build-asset:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        asset:
          - shim-v2
    steps:
      - uses: actions/checkout@v2
      - name: Install docker
        run: |
          curl -fsSL https://test.docker.com -o test-docker.sh
          sh test-docker.sh

      - name: Build ${{ matrix.asset }}
        run: |
          ./tools/packaging/kata-deploy/local-build/kata-deploy-binaries-in-docker.sh --build="${KATA_ASSET}"
          build_dir=$(readlink -f build)
          # store-artifact does not work with symlink
          sudo cp -r "${build_dir}" "kata-build"
        env:
          KATA_ASSET: ${{ matrix.asset }}
          TAR_OUTPUT: ${{ matrix.asset }}.tar.gz

      - name: store-artifact ${{ matrix.asset }}
        uses: actions/upload-artifact@v2
        with:
          name: kata-artifacts
          path: kata-build/kata-static-${{ matrix.asset }}.tar.xz
          if-no-files-found: error

  create-kata-tarball:
    runs-on: ubuntu-latest
    needs: build-asset
    steps:
      - uses: actions/checkout@v2
      - name: get-artifacts
        uses: actions/download-artifact@v2
        with:
          name: kata-artifacts
          path: kata-artifacts
      - name: merge-artifacts
        run: |
          ./tools/packaging/kata-deploy/local-build/kata-deploy-merge-builds.sh kata-artifacts
      - name: store-artifacts
        uses: actions/upload-artifact@v2
        with:
          name: kata-static-tarball
          path: kata-static.tar.xz

  create-kata-deploy:
    needs: create-kata-tarball
    runs-on: ubuntu-latest
    env:
      CONTAINER_REGISTRY: quay.io
      CONTAINER_REGISTRY_ORG: jcvenegas
      CONTAINER_IMAGE_NAME: kata-deploy
    steps:
      - uses: actions/checkout@v2

      - name: get-kata-tarball
        uses: actions/download-artifact@v2
        with:
          name: kata-static-tarball

      - name: build-and-push-kata-deploy-ci
        id: build-and-push-kata-deploy-ci
        run: |
          pkg_sha=$(git rev-parse HEAD)

          mv kata-static.tar.xz $GITHUB_WORKSPACE/tools/packaging/kata-deploy/kata-static.tar.xz

          container_name="${CONTAINER_REGISTRY}/${CONTAINER_REGISTRY_ORG}/${CONTAINER_IMAGE_NAME}-ci:${pkg_sha}"
          echo "::set-output name=CONTAINER_IMAGE::${container_image}"

          docker build --build-arg KATA_ARTIFACTS=kata-static.tar.xz -t "${container_name}" ./tools/packaging/kata-deploy

          docker login "${CONTAINER_REGISTRY}" -u ${{ secrets.CONTAINER_REGISTRY_USERNAME }} -p ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          docker push "${container_name}"

          # FIXME: Not needed, can  just call directly the action
          mkdir -p packaging/kata-deploy
          ln -s $GITHUB_WORKSPACE/tools/packaging/kata-deploy/action packaging/kata-deploy/action

      - name: debug
        run: |
          echo "DEBUG: output  ${container_image}"
        env:
          container_image: ${{ steps.build-and-push-kata-deploy-ci.outputs.CONTAINER_IMAGE }}

      - name: test-kata-deploy-ci-in-aks
        uses: ./packaging/kata-deploy/action
        with:
          container_image: ${{ steps.build-and-push-kata-deploy-ci.outputs.CONTAINER_IMAGE }}
        env:
          AZ_APPID: ${{ secrets.AZ_APPID }}
          AZ_PASSWORD: ${{ secrets.AZ_PASSWORD }}
          AZ_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          AZ_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}

      - name: push-tested-container-image
        run: |
          tag=$(echo $GITHUB_REF | cut -d/ -f3-)
          container_image_release="${CONTAINER_REGISTRY}/${CONTAINER_REGISTRY_ORG}/${CONTAINER_IMAGE_NAME}:${tag}"
          docker tag "${TESTED_CONTAINER_IMAGE}" "${container_image_release}"
          docker push "${container_image_release}"
        env:
          TESTED_CONTAINER_IMAGE: ${{ steps.build-and-push-kata-deploy-ci.outputs.CONTAINER_IMAGE }}

  upload-static-tarball:
    needs: create-kata-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: download-artifacts
        uses: actions/download-artifact@v2
        with:
          name: release-candidate
      - name: install hub
        run: |
          HUB_VER=$(curl -s "https://api.github.com/repos/github/hub/releases/latest" | jq -r .tag_name | sed 's/^v//')
          wget -q -O- https://github.com/github/hub/releases/download/v$HUB_VER/hub-linux-amd64-$HUB_VER.tgz | \
          tar xz --strip-components=2 --wildcards '*/bin/hub' && sudo mv hub /usr/local/bin/hub
      - name: push static tarball to github
        run: |
          tag=$(echo $GITHUB_REF | cut -d/ -f3-)
          tarball="kata-static-$tag-x86_64.tar.xz"
          mv kata-static.tar.xz "$GITHUB_WORKSPACE/${tarball}"
          pushd $GITHUB_WORKSPACE
          echo "uploading asset '${tarball}' for tag: ${tag}"
          GITHUB_TOKEN=${{ secrets.GIT_UPLOAD_TOKEN }} hub release edit -m "" -a "${tarball}" "${tag}"
